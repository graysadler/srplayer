package com.streamriot{		import flash.display.MovieClip;	import flash.display.SpreadMethod;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.Event;	import com.greensock.loading.display.*;	import com.greensock.loading.*;	import flash.media.SoundTransform;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.display.Loader;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.external.ExternalInterface;	import flash.utils.getDefinitionByName;	import flash.system.LoaderContext;	import flash.net.URLRequest;		import com.greensock.events.LoaderEvent;	//import com.demonsters.debugger.MonsterDebugger;		public class SRPlayerTwitch extends SRPlayer	{		var numAdStarted:Number = 0;				public var TwitchPlayerClass:Class;		public var TwitchPlayerObject:Object;		public var TwitchEventClass:Class;		public var TwitchEventObject:*;		public function SRPlayerTwitch(strName:String, nNum:Number, blnCtls:Boolean = false, objStream:Object = null)		{			super(strName, nNum, blnCtls, objStream);					}						function onChildAdded(e:Event):void {			//scalePlayer();		}				public override function scalePlayer():void {			//MonsterDebugger.trace('scalePlayer called', null);			try {				var loader:SWFLoader = LoaderMax.getLoader(this.name);				loader.rawContent.scaleX = (loader.rawContent.scaleY = 1);				loader.rawContent.scaleX = dWidth / loader.rawContent.width;				loader.rawContent.scaleY = dHeight / loader.rawContent.height;				//dispatchEvent(new Event("updateLayout", true, true));			} catch(e:Error) {											}		}				public override function onLoaderComplete(event:LoaderEvent):void		{			            var loader:SWFLoader = LoaderMax.getLoader(this.name);            this.scaleX = (this.scaleY = 1);            TwitchEventClass = swfLoader.rawContent.loaderInfo.applicationDomain.getDefinition("tv.twitch.gui.skins.ControlBarEvent");			//MonsterDebugger.trace('TwitchEventClass', TwitchEventClass);			// Try to resize here if not set an error?			try {				var container:Sprite = loader.rawContent.getChildAt(0) as Sprite;				var controls:Sprite = container.getChildAt(1) as Sprite;				var stream:Sprite = container.getChildAt(0) as Sprite;				var streamTop:Sprite = stream.getChildAt(3) as Sprite												var scale:Number = Math.min( stream.width / container.width,								stream.height / container.height);									  				streamTop.height = 0;				streamTop.width = 0;				//stream.scaleX = stream.scaleY = 1							controls.visible = false;				controls.height = 0;					} catch(e:Error) {				trace('SR: error in onLoaderComplete. No container Sprites found');			}			scale = Math.min( dWidth / loader.rawContent.width,				dHeight	 / loader.rawContent.height);				//loader.rawContent.scaleX = loader.rawContent.scaleY = scale;				loader.rawContent.scaleX = dWidth / loader.rawContent.width;				loader.rawContent.scaleY = dHeight / loader.rawContent.height;				scalePlayer();			super.onLoaderComplete(event);						//this.addEventListener(Event.ADDED, onChildAdded);											}					public override function onResize(scale:Number):void {					}				public override function initStream(blnAddTimer:Boolean = false):void		{			super.initStream(blnAddTimer);			//fix for jtv						//api.api.countdown_display.y = 100;			try			{				////MonsterDebugger.trace("api.api.age_gate_window", api.api.age_gate_window);				//api.api.should_pause_for_age_gate = false;				//api.api.referee_passed = true;				//api.api.age_gate_window.visible = false;				//api.api.age_gate_window.scaleX = api.api.age_gate_window.scaleY = 0;				//dispatchEvent(new Event("updateLayout", true, true));				//trace("STREAMRIOT: age request removed");			}			catch (e:Error)			{				//trace("STREAMRIOT: ERROR no pause for age");			}		}				public override function checkFrozen():Boolean		{			return false;			try			{				var ad_running:Boolean = api.api.ad_running;				//var ad_running:Boolean = api.api.last_opportunity_ping;				if (!ad_running)				{					numAdStarted = 0;					return false;				}								var curDate:Date = new Date();				var curTime:Number = curDate.time;								if (numAdStarted == 0)				{					numAdStarted = curTime;				}								var maxTime:Number = numAdStarted + (35 * 1000);								if (curTime > maxTime)				{					numAdStarted = 0;					return true;				}			}			catch (e:Error)			{				return false;			}						return false;				}				public override function validateSwf():Boolean		{			try			{			}			catch (e:Error)			{				return false;			}						return true;		}				public override function setVolume(pct:Number, blnSave:Boolean = true):Boolean		{			try			{				trace('STREAMRIOT: changing twitch volume: ' + pct);				var objInfo:Object = new Object();				objInfo.volume = pct;				var TwitchEvent:* = new TwitchEventClass('controlVolume', objInfo);				api.getChildAt(0).dispatchEvent(TwitchEvent);				super.setVolume(pct, blnSave);				return true;			}			catch (e:Error)			{				trace('STREAMRIOT: error changing twitch volume: ' + e.message);				return false;			}						return true;		}				public override function stopStream():void		{			return;			if (obj == null || api == null)			{				return;			}						try			{				api.api.play_live(0);			}			catch (e:Error)			{				trace('STREAMRIOT: error stopping stream');			}		}				public override function pauseStream():Boolean		{			try {				var TwitchEvent:* = new TwitchEventClass('controlPause');				api.getChildAt(0).dispatchEvent(TwitchEvent);							} catch(e:Error) {				trace('SR: Error pausing stream. No TwitchEventClass');			}			return true;		}				public override function changeQuality(strQuality:String = "low"):Boolean {									try {				var objInfo:Object = new Object();				objInfo.item = strQuality;				var TwitchEvent:* = new TwitchEventClass('controlQuality', objInfo);							api.getChildAt(0).dispatchEvent(TwitchEvent);			} catch (e:Error) {				trace('SR: error changing quality ' + e.message);				return false;			}			return true;		}				public override function playStream(strQuality:String = "low"):Boolean		{			var TwitchEvent:* = new TwitchEventClass('controlPause');			api.getChildAt(0).dispatchEvent(TwitchEvent);						return true;			trace('STREAMRIOT: attempting to play twitch stream');			try			{								if (strQuality == "high")				{					api.api.play_live(obj.channel_name, 'high');				}				else				{					api.api.play_live(obj.channel_name, 'medium');				}							}			catch (e:Error)			{				trace('STREAMRIOT: error playing twitch stream: ' + e.message);				return false;			}			try			{				api.api.age_gate_window.visible = false;			}			catch (e:Error)			{							}			return true;		}	}}