package com.streamriot{	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;	import com.greensock.loading.display.*;	import com.greensock.loading.*;	import flash.media.SoundTransform;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.display.Loader;	import flash.external.*;	import flash.external.ExternalInterface;	import flash.net.URLRequest;	import flash.system.Security;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import com.greensock.events.LoaderEvent;	import com.demonsters.debugger.MonsterDebugger;					public class SRPlayerUStream extends SRPlayer	{			var uStreamViewerRSLLoader:Loader = new Loader();			var uStreamViewerRSLContext:LoaderContext = new LoaderContext();			var uStreamViewerRSLRequest:URLRequest = new URLRequest("lib.ustream.viewer.rsl.swf");			var uStreamViewerLogicClass:Class;			var uStreamViewerObject:Object;					public function SRPlayerUStream(strName:String, nNum:Number, blnCtls:Boolean = false, objStream:Object = null) {			super(strName, nNum, blnCtls, objStream);						//stop();				}				public override function onResize(scale:Number):void {			var newScaleY:Number = this.height / uStreamViewerObject.display.height;			var newScaleX:Number = this.width / uStreamViewerObject.display.width;						//uStreamViewerObject.display.scaleX = newScaleX;			//uStreamViewerObject.display.scaleY = newScaleY;			var blah:String = "";		}				public override function arrangePlayer():void		{						super.arrangePlayer();					}				public override function onLoaderComplete(event:LoaderEvent):void		{			var loader:SWFLoader = LoaderMax.getLoader(this.name);			this.scaleX = this.scaleY = 1;			uStreamViewerLogicClass = loader.rawContent.loaderInfo.applicationDomain.getDefinition('tv.ustream.viewer.logic.Logic');			uStreamViewerObject = new uStreamViewerLogicClass();			uStreamViewerObject.display.height = dHeight;			uStreamViewerObject.display.width = dWidth;			this.addChild(uStreamViewerObject.display);			uStreamViewerResizeViewer();			uStreamViewerObject.createChannel(obj.channel);			placeHolder.visible = false;			setChildIndex(uStreamViewerObject.display, 1);			super.onLoaderComplete(event);								}					public override function setApi():Boolean {			api = uStreamViewerObject.display;			return true;		}				public override function playStream(strQuality:String = "low"):Boolean		{						uStreamViewerObject.createChannel(obj.channel);								//uStreamViewerResizeViewer();			return true;		}		public override function setVolume(pct:Number, blnSave:Boolean = true):Boolean		{			try			{				trace('STREAMRIOT: changing ustream volume: ' + pct);				//pct = pct * 100;				uStreamViewerObject.volume = pct;				super.setVolume(pct, blnSave);								return true;			}			catch (e:Error)			{				trace('STREAMRIOT: error changing ustream volume: ' + e.message);				return false;			}			return true;		}				public override function pauseStream():Boolean		{			trace('STREAMRIOT: attempting to pause ustream');			try			{				uStreamViewerObject.playing = false;				return true;			}			catch (e:Error)			{				trace('STREAMRIOT: error pausing ustream: ' + e.message);				return false;			}			return true;		}						public override function stopStream():void		{							try {				uStreamViewerObject.channel.playing = false;			} catch (e:Error) {				trace('STREAMRIOT: error stopping ustream');			}		}				//	Viewer Methods		function uStreamViewerResizeViewer () {			//uStreamViewerObject.display.x = 0;			//uStreamViewerObject.display.y = 0;			var scale:Number = Math.min( dWidth / uStreamViewerObject.display.width,                            dHeight / uStreamViewerObject.display.height );			//uStreamViewerObject.display.scaleX = uStreamViewerObject.display.scaleY = scale;			uStreamViewerObject.display.height = dHeight;			uStreamViewerObject.display.width = dWidth;									//uStreamViewerObject.display.scaleX = uStreamViewerObject.display.scaleY;		}			}}