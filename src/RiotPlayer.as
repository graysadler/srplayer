package {	import flash.display.MovieClip;	import flash.display.DisplayObject;	import flash.events.MouseEvent;	import flash.utils.getDefinitionByName;	import com.greensock.loading.*;	import com.greensock.events.LoaderEvent;	import com.greensock.loading.display.*;	import flash.external.ExternalInterface;	import flash.system.Security;	import flash.system.LoaderContext;	import flash.system.ApplicationDomain;	import flash.display.Stage;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.Event;	import flash.display.Loader;	import com.demonsters.debugger.MonsterDebugger;	import com.streamriot.SRPlayerTwitch;	import com.streamriot.SRPlayerUStream;	import flash.media.SoundTransform;	import flash.media.SoundMixer;		public class RiotPlayer extends MovieClip	{		private static var _instance:RiotPlayer;		public var objStreams:Object = new Object;		public var loaders:Object = new Object();		public var playerLoaders:Object = new Object();		public var currentLayout:String;				public var numPlayers:Number;		public var queue:LoaderMax = new LoaderMax({name:"loaders",onScriptAccessDenied:onScriptAccessDeniedHandler, onProgress:progressHandler, onComplete:completeHandler, onError:errorHandler, auditSize:false});		public var dWidth:Number = 620;		public var dHeight:Number = 378;		public var debug:Boolean = false;		public var soundTrans:SoundTransform = new SoundTransform(1);				//var srLoader:SRLoader = new SRLoader(true);		var iCurLayout:Number = 0;				function onTimer(e:TimerEvent):void {			var a:Array = new Array();			a.push('1-1');			a.push('2-1');			a.push('2-2');			a.push('2-3');			a.push('3-1');			a.push('3-2');			a.push('4-1');			a.push('4-2');			a.push('4-3');			a.push('5-1');			a.push('5-2');									updateLayout(a[iCurLayout]);			iCurLayout++;			if(iCurLayout == 11) {				iCurLayout = 0;			}		}				public function RiotPlayer()		{			MonsterDebugger.initialize(this);			stage.addEventListener(Event.RESIZE, function(e:Event){				stage.scaleMode = flash.display.StageScaleMode.SHOW_ALL				stage.align = '';				if(this.width < stage.stageWidth) {					this.x = (stage.stageWidth - this.width) / 2;								} 				if(this.height < stage.stageHeight) {					this.y = (stage.stageHeight - this.height) / 2;				}							});			// Add controls			//var ctrl:PlayerControlsMain = this.ctrl;			ctrl.x = 0			ctrl.y = stage.stageHeight - ctrl.height + ctrl.layoutOps.height;			//ctrl.name = "ctrls";			//addChild(ctrl);						var moveTimer:Timer = new Timer(1500);						_instance = this;						// You must allow justin.tv; for simplicity of developing against localhost as well I've allowed *			Security.allowDomain("*");			Security.allowInsecureDomain("*");					this.addEventListener("swapPlayers", onSwapPlayers);			this.addEventListener("makeActive", onMakeActive);			this.addEventListener("closePlayer", onClosePlayer);			this.addEventListener("removeStream", onRemoveStream);			this.addEventListener("loadComplete", onLoadComplete);			this.addEventListener("onPlayerAddedToStage", onPlayerAddedToStage);			this.addEventListener("updateLayout", updateLayout);						this.addEventListener("changeVolume", onChangeVolume);			this.addEventListener("streamPlayed", onStreamPlay);			this.addEventListener("streamPaused", onStreamPause);			this.addEventListener("qualityChanged", onQualityChange);			this.addEventListener("refreshStream", onRefreshStream);								if (ExternalInterface.available)			{				ExternalInterface.addCallback("loadPlayers", loadPlayers);				ExternalInterface.addCallback("updateLayout", updateLayout);				ExternalInterface.addCallback("updateStream", updateStream);				ExternalInterface.addCallback("updateStreams", updateStreams);				ExternalInterface.addCallback("fullScreen", fullScreen);				ExternalInterface.addCallback("removeStream", removeStream);				//Call js to populate the player				ExternalInterface.call("LoadStreams");			}						//TESTING BEGIN			//oConfig hold riot player settings			//this is just for testing purposes						if(debug) {								var oConfig:Object = new Object;				//todo make this dynamic				oConfig.num_players = 2;				for (var i:Number = 1; i<=oConfig.num_players; i++)				{					objStreams[i] = new Object();					objStreams[i].channel_name = "tsm_theoddone";					//objStreams[i].channel = "4042901";					//objStreams[i].channel_name = "exploreOsprey";					//objStreams[i].src = "http://www.youtube.com/apiplayer?version=3";					//objStreams[i].src = "http://www.justin.tv/widgets/live_api_player.swf?consumer_key=uuK44QXqaI8yhvoS0q6Kw&video_width=620&video_height=378";					//objStreams[i].src = "http://www-cdn.jtvnw.net/swflibs/TwitchPlayer.swf?consumer_key=uuK44QXqaI8yhvoS0q6Kw&video_width=620&video_height=378&initCallback=onPlayerLoad&embed=1&channel=apdrop&player_debug=1";					objStreams[i].src = "http://www.twitch.tv/widgets/live_embed_player.swf?channel=mlg";					//objStreams[i].src = "http://static.llnw.own3d.tv/player/Own3dPlayerV3_11.swf?config=liveembedcfg/13574&autoplay=true&simplePlayer=true&swfVfy=True";					objStreams[i].num_viewers = 462 * i;					objStreams[i].player_num = i;					objStreams[i].current_pos = i;						objStreams[i].stream_id = i;						 					objStreams[i].provider = 'twitch.tv';								//objStreams[i].provider = 'ustream.tv';				}				oConfig.streams = objStreams;				loadPlayers(oConfig);				updateLayout(oConfig.num_players+'-1');			}			//END OF TESTING									if(this.width < stage.stageWidth) {				this.x = (stage.stageWidth - this.width) / 2;							} 			if(this.height < stage.stageHeight) {				this.y = (stage.stageHeight - this.height) / 2;			}			//var scale:Number = Math.min( stage.stageWidth / this.width,				//stage.stageHeight / this.height);				//this.scaleX = this.scaleY = scale;			trace("added controls");								}				public static function get instance():RiotPlayer		{			return _instance;		}				function onPlayerAddedToStage(e:Event):void {			updateLayout(currentLayout);		}				function onLoadComplete(e:Event):void {			var strLoader:String = e.target.name;						var player = this.getChildByName(strLoader) as MovieClip;						player.hideLoader();		}		public function fullScreen():void {			var player = this.getChildByName(playerLoaders["1"]) as MovieClip;			player.overlay.ctls.toggleFullscreen();		}				function onSwapPlayers(e:Event):void {			var thisNum:Number = e.target.thisNum;			var thatNum:Number = e.target.thatNum;						swapPlayers(thisNum, thatNum);		}				function onMakeActive(e:Event):void {			var thisNum:Number = e.target.playerNum;			var thatNum:Number = 1;						swapPlayers(thisNum, thatNum);		}				function onClosePlayer(e:Event):void {			closePlayer(e.target.strLoader);		}				function onRemoveStream(e:Event):void {			removeStream(e.target.strLoader);		}						function initLoader():void		{			trace('STREAMRIOT: initLoader called');						//var scale:Number = stage.stageWidth / srLoader.width;						//srLoader.scaleX = srLoader.scaleY = scale;						//srLoader.x = (stage.stageWidth - srLoader.width) / 2;			//srLoader.y = (stage.stageHeight - srLoader.height) / 2;			//addChild(srLoader);						srLoader.showLoader();		}		function updateLoader(pct:Number):void		{			srLoader.showProgress(pct);		}		function closeLoader():void		{			try {				removeChild(srLoader);			} catch (e:Error) {				//no worries, it's just not on the stage			}		}		function closePlayer(strLoader:String):void		{			var player = this.getChildByName(strLoader) as MovieClip;			var iPlayer:Number = player.playerNum;						removeStream(strLoader);			ShiftPlayers(iPlayer);		}		function swapPlayers(thisNum:Number, thatNum:Number):void		{			var thisLoader:String = playerLoaders[thisNum];			var thatLoader:String = playerLoaders[thatNum];			var mcThis:*			var mcThat:*			mcThis = this.getChildByName(thisLoader) as MovieClip;			mcThat = this.getChildByName(thatLoader) as MovieClip;			playerLoaders[thisNum] = thatLoader;			playerLoaders[thatNum] = thisLoader;						if (ExternalInterface.available)			{				try {					ExternalInterface.call("SR.updatePosition", mcThis.obj.stream_id, thatNum, false);					ExternalInterface.call("SR.updatePosition", mcThat.obj.stream_id, thisNum, false);				} catch(e:Error) {									}			}						MonsterDebugger.trace('swapped players 4', null);						mcThis.updatePlayer(thatNum);			mcThat.updatePlayer(thisNum);			if(thatNum > numPlayers) {				currentLayout = String(thatNum) + '-1';				numPlayers = thatNum;			}						updateLayout(currentLayout);								}				function arrangePlayer(strPlayer:String):void {			var player = this.getChildByName(strPlayer) as MovieClip;			player.arrangePlayer();		}		function ShiftPlayers(iStart:Number):void		{			var iPlayer:Number = iStart;			var strNewLayout:String = currentLayout;			var iLayout:Number;			var objPlayers:Object = new Object;			var iPos:Number;						var iFirst:String = playerLoaders[iStart];			var iLast:String = playerLoaders[iLayout];			var player:*;						strNewLayout = strNewLayout.substr(0,1);			iLayout = Number(currentLayout.substr(0,1));						for(var i:Number = iStart; i <= iLayout; i++) {				if(i == iLayout) {					playerLoaders[i] = iFirst;					player = this.getChildByName(iFirst) as MovieClip;					player.updatePlayer(i);				} else {					iPos = i + 1;					playerLoaders[i] = playerLoaders[iPos];					player = this.getChildByName(playerLoaders[iPos]) as MovieClip;					player.updatePlayer(i);				}												}						//update layout			iLayout--;			strNewLayout = String(iLayout) + '-1';			updateLayout(strNewLayout);					}		function removeStream(strPlayer:String, blnLoaderOnly:Boolean = false):void		{			//removing the stream ends the stream			//the layout remains 			//unload the stream and show bg image			MonsterDebugger.trace('removeStream strPlayer', strPlayer);						if(blnLoaderOnly == true) {				strPlayer = playerLoaders[strPlayer];			}			var player = this.getChildByName(strPlayer) as MovieClip;						if(blnLoaderOnly == false) {				removeChild(player);			}						player.removeStream();			if(ExternalInterface.available) {				//ExternalInterface.call("removeChat", player.obj);			}		}		function clearChats():void		{			trace('STREAMRIOT: clearChats() called');					}				function getPlayer(strPlayer:String):MovieClip {			return this.getChildByName(strPlayer) as MovieClip;		}				function addPlayer(objStream:Object, numPos:Number, strPlayer:String):MovieClip {			var player:* = player = getPlayer(strPlayer);						if (player) {				removeStream(strPlayer);			}			player = null;						playerLoaders[numPos] = strPlayer;						if(objStream.provider == 'justin.tv' || objStream.provider == 'twitch.tv') {				player = new SRPlayerTwitch(strPlayer, numPos, false, objStream);			} else if(objStream.provider == 'ustream.tv') {				player = new SRPlayerUStream(strPlayer, numPos, false, objStream);			}			player.visible = false;			addChild(player);				trace('STREAMRIOT: added player to stage');									return player;		}				function loadPlayers(objConfig:Object)		{			var objStream:Object;			var s:String;			var strPlayer:String;			var player:*;			var loader:SWFLoader;						objStreams = objConfig.streams;			trace('loading streams');			//init the loader bar			//set some LoaderMax and queue settings			var loadContext:LoaderContext = new LoaderContext(true);			loadContext.applicationDomain = new ApplicationDomain();			LoaderMax.defaultContext = loadContext;			LoaderMax.defaultAuditSize = true;						LoaderMax.defaultEstimatedBytes = 100000;			queue.maxConnections = 3;			queue.autoLoad = true;						//numPlayers = initial # of players to show			numPlayers = objConfig.num_players;			//save global variable for currentLayout			currentLayout = String(numPlayers) + '-1';						//set max # of players = 5			//this obj saves positions of players			//create some empty players, real streams will replace these			var blnShowCtls:Boolean;			for(var i:Number = 1; i<=5; i++) { 				blnShowCtls = false;				strPlayer = "player" + i;				s = String(i);				playerLoaders[s] = strPlayer;				loaders[i] = null;								if (i == 1) {					blnShowCtls = true;				}				player = new SRPlayer(strPlayer, i, blnShowCtls);				player.visible = false;				addChild(player);			}			i = 0;			for (var key:String in objStreams)			{				objStream = objStreams[key];				//only load streams that will be visisble initially				if (i <= objConfig.num_players)				{					if (objStream.player_num <= numPlayers) {						i++;						trace('STREAMRIOT: appending to queue ' + objStream.src);						strPlayer = "player" + objStream.player_num;						player = addPlayer(objStream, objStream.player_num, strPlayer);												//player.addLoader(objStream, false);						loader = player.addLoader(objStream, false)						if(debug == false) {							queue.append(loader);						}					}				} 			}						initLoader();					}		function updateStreams(objConfig:Object)		{						try {						objStreams = objConfig.streams;			} catch(e:Error) {				trace('SR: Error updating Streams object');			}		}				//this listener runs any time something happens in loaded swf		function checkResize(event:Event):void {			if(event == null) {				return;			}			trace('STREAMRIOT: check resize called');			var swf:SWFLoader;			var blnComplete:Boolean = true;			var strLoader:String;						for (var p:String in playerLoaders) {				strLoader = playerLoaders[p];				swf = LoaderMax.getLoader(strLoader);								try {					if (swf.rawContent.width) {												trace('STREAMRIOT: checkResize called, this shouldnt be frequent');					} else {						blnComplete = false;					}				}catch (e:Error) {					blnComplete = false;				}			}						if(blnComplete == true) {				removeEventListener(Event.ENTER_FRAME, checkResize);			}		}		function progressHandler(event:LoaderEvent):void		{			trace("STREAMRIOT: Queue progress: " + event.target.progress);			updateLoader(event.target.progress);		}		function completeHandler(event:LoaderEvent):void		{			var obj:Object;			var scale:Number;			var p:String;			var swfContent:ContentDisplay;			var playerMC:MovieClip;			var strLoader:String;			var strPlayer:String;			var n:Number = 0;						trace('SR: closing loader');			closeLoader();			trace('SR: updating layout');			updateLayout(currentLayout);						return;		}				function onScriptAccessDeniedHandler(e:LoaderEvent) {			trace('SR: security error: ' + e.text);		}		function setPlayerSize(nPlayer:Number, strLayout:String):void		{			var lgh:Number;			var lgw:Number;			var h:Number = 378;			var w:Number = 620;			var sh:Number = stage.stageHeight;			var sw:Number = stage.stageWidth;			var bw:Number = 620;			var bh:Number = 378;			var strPlayer:String = playerLoaders[nPlayer];						// Reduce stageHeight for controls						//var ctrls = this.getChildByName("ctrls") as MovieClip			try {				sh = sh - ctrl.height + ctrl.layoutOps.height;			} catch(e:Error) {							}			switch (strLayout)			{								case '1-1' :					lgw = sw;					lgh = bh * (sw / bw);					h = lgh;					w = lgw;					break;				case '2-1' :					lgh = sh / 2 - 5;					lgw = bw * (lgh / bh);										h = lgh;					w = lgw;					break;				case '2-2' :					lgw = sw / 2 - 5;					lgh = bh * (lgw / bw);					h = lgh;					w = lgw;					break;				case '2-3' :					lgw = sw;					lgh = sh;					h = lgh * .3;					w = lgw * .3;					break;				case '3-1' :					lgh = sh / 3 * 2 - 5;					lgw = bw * (lgh / bh);										h = sh - lgh - 10;					w = bw * (h / bh);					break;				case '3-2' :					lgw = sw / 3 * 2 - 5;					lgh = bh * (lgw / bw);										w = sw - lgw - 15;					h = bh * (w / bw);					break;				case '4-1' :					lgh = sh / 4 * 3 - 5;					lgw = bw * (lgh / bh);										h = sh - lgh - 5;					w = bw * (h / bh);					break;				case '4-2' :					lgw = sw / 4 * 3 - 5;					lgh = bh * (lgw / bw);										w = sw - lgw - 15;					h = bh * (w / bw);					break;				case '4-3' :					lgw = sw / 2 - 5;					lgh = bh * (lgw / bw);					h = lgh;					w = lgw;					break;				case '5-1' :					//lgw = ((sw / 3) * 2) - 10;					lgw = ((sw / 4) * 3) - 10;					lgh = bh * (lgw / bh);					h = (sh / 4) - 10;					w = bw * (h / bh);										break;				case '5-2' :					lgh = (sh / 4 * 3) - 10;					lgw = bw * (lgh / bh);										w = sw / 4 - 10;					h = bh * (w / bw);										break;			}			if (nPlayer == 1)			{				h = lgh;				w = lgw;			}						try			{				trace('STREAMRIOT: player #' + nPlayer + ' with loader attempting to change size '+w+'x'+h);								resizeMe(strPlayer, w, h);							}			catch (e:Error)			{				trace('STREAMRIOT: error changing size of player: ' + e.message);			}					}		function errorHandler(event:LoaderEvent):void		{			trace("STREAMRIOT: error occured with " + event.target + ": " + event.text);		}		function updateStats(strPlayer:String = ""):void		{						if(strPlayer != "") {				var player = this.getChildByName(strPlayer) as MovieClip;				player.updateStats();				return;			}						for(var i:Number = 1; i <= 5; i++) {				player = this.getChildByName("player"+i) as MovieClip;				player.updateStats();			}		}		//The resizing function		// parameters		// required: mc = the movieClip to resize		// required: maxW = either the size of the box to resize to, or just the maximum desired width		// optional: maxH = if desired resize area is not a square, the maximum desired height. default is to match to maxW (so if you want to resize to 200x200, just send 200 once)		// optional: constrainProportions = boolean to determine if you want to constrain proportions or skew image. default true.		function resizeMe(strPlayer:String, maxW:Number, maxH:Number=0, constrainProportions:Boolean=false):void		{			trace('STREAMRIOT: resizing player ' + strPlayer);			var player:MovieClip = getPlayer(strPlayer); //this[strPlayer];			var scale:Number = Math.min( maxW / 620,                            maxH / 378);							player.scaleX = player.scaleY = scale;			player.onResize(scale);			player.scalePlayer(); 					}		public function updateLayout(layout:* = ""):void		{			var strLayout:String = '';			var bw:Number = 620;			var bh:Number = 378;			var sw:Number = stage.stageWidth;			var sh:Number = stage.stageHeight;			var iPadding:Number = 10;			var iWidth:Number;			var iHeight:Number;			var player:Object = new Object;			//var ctrls = this.getChildByName("ctrls") as MovieClip;			//var layoutOps = ctrls.getChildByName("layoutOps") as MovieClip;						sh = sh - (ctrl.height - ctrl.layoutOps.height);						try {				strLayout = layout.target.curLayout;			} catch(e:Error) {							}			if (strLayout == "") {				strLayout = currentLayout;			}									var iNumPlayers:Number = Number(strLayout.substr(0,1));			trace('stageWidth: ' + sw);			trace('stageHeight: ' + sh);			numPlayers = iNumPlayers;						bw = dWidth;			bh = dHeight;						currentLayout = strLayout;						//MonsterDebugger.trace('ctrl', ctrl);			//var mcLayoutOps:MovieClip = ctrl.layoutOps as MovieClip;				var layoutName:String = 'layout' + currentLayout.replace('-','');			ctrl.layoutOps.curLayout = currentLayout;			ctrl.layoutOps.layoutName = layoutName;			ctrl.layoutOps.updateLayout(layoutName);						MonsterDebugger.trace('layoutops curlayout changes', null);						trace('STREAMRIOT: attempting to update layout to ' + strLayout);			setPlayerSize(1, strLayout);			setPlayerSize(2, strLayout);			setPlayerSize(3, strLayout);			setPlayerSize(4, strLayout);			setPlayerSize(5, strLayout);						for(var p:String in playerLoaders) {				player[p] = getPlayer(playerLoaders[p]);				player[p].visible = false;			}						player["1"].x = player["1"].y = 0;			player["2"].x = player["2"].y = 0;			player["3"].x = player["3"].y = 0;			player["4"].x = player["4"].y = 0;			player["5"].x = player["5"].y = 0;						//hide players if needed			//adding try catch here in case all players aren't loaded			try {			switch (iNumPlayers)			{				case 1:					player["1"].visible = true;					break;				case 2 :					player["1"].visible = true;					player["2"].visible = true;					break;				case 3 :					player["1"].visible = true;					player["2"].visible = true;					player["3"].visible = true;					break;				case 4 :					player["1"].visible = true;					player["2"].visible = true;					player["3"].visible = true;					player["4"].visible = true;					break;				case 5 :					player["1"].visible = true;					player["2"].visible = true;					player["3"].visible = true;					player["4"].visible = true;					player["5"].visible = true;					break;			}			switch (strLayout)			{				case '1-1' :					player["1"].x = 0;					player["1"].y = iPadding;														break;				case '2-1' :					player["1"].x = (sw / 2) - ((player["1"].width) / 2);					player["1"].y = 2;					player["2"].x = player["1"].x;					player["2"].y = player["1"].y + player["1"].height + 10;					break;				case '2-2' :					player["1"].x = (sw / 2) - ((player["1"].width)) - 5;					player["1"].y = (sh / 2) - (player["1"].height / 2);					player["2"].x = player["1"].x + player["1"].width + 5;					player["2"].y = player["1"].y;					break;				case '2-3' :					player["1"].x = 0;					player["1"].y = 2;					player["2"].x = player["1"].x + 45;					player["2"].y = player["1"].y + player["1"].height - player["2"].height - 60;					break;				case '3-1' :					player["1"].x = (sw / 2) - ((player["1"].width) / 2);					player["1"].y = 2;					player["2"].x = player["1"].x;					player["2"].y = player["1"].y + player["1"].height + 7;					player["3"].x = player["1"].x + player["1"].width - player["3"].width;					player["3"].y = player["2"].y;					break;				case '3-2' :					player["1"].x = (sw / 2) - ((player["1"].width/4) * 3);					player["1"].y = (sh - player["1"].height) / 2;					player["2"].x = player["1"].x + player["1"].width + 10;					player["2"].y = player["1"].y;					player["3"].x = player["2"].x;					player["3"].y = player["2"].y + player["2"].height + 10;					break;				case '4-1' :					player["1"].x = (sw / 2) - ((player["1"].width) / 2);					player["1"].y = 1;					player["3"].x = player["1"].x + (player["1"].width / 2) - (player["3"].width / 2);					player["3"].y = player["1"].y + player["1"].height + 3;										player["2"].x = player["3"].x - player["2"].width - 5;					player["2"].y = player["3"].y;					player["4"].x = player["3"].x + player["3"].width + 5;					player["4"].y = player["3"].y;															break;				case '4-2' :					player["1"].x = (sw / 2) - ((player["1"].width/3) * 2);					player["1"].y = (sh - player["1"].height) / 2;					player["2"].x = player["1"].x + player["1"].width + 10;					player["2"].y = player["1"].y - 2;					player["3"].x = player["2"].x;					player["3"].y = player["2"].y + player["2"].height + 10;					player["4"].x = player["2"].x;					player["4"].y = player["3"].y + player["2"].height + 10;					break;				case '4-3' :					player["1"].x = (sw / 2) - ((player["1"].width)) - 5;					player["1"].y = 5;					player["2"].x = player["1"].x + player["1"].width + 10;					player["2"].y = 5;					player["3"].x = player["1"].x;					player["3"].y = player["1"].y + player["1"].height + 5;					player["4"].x = player["2"].x;					player["4"].y = player["2"].y + player["2"].height + 5;					break;				case '5-1' :					//player["1"].x = (sw / 2) - ((player["1"].width/4) * 3);					//player["1"].y = (sh / 2) - (player["1"].height / 2);										player["1"].x = 0;					player["1"].y = (sh / 2) - (player["1"].height / 2);										player["2"].x = player["1"].x + player["1"].width + 10;					player["2"].y = 5;					player["3"].x = player["2"].x;					player["3"].y = player["2"].y + player["2"].height + 10;					player["4"].x = player["2"].x;					player["4"].y = player["3"].y + player["3"].height + 10;					player["5"].x = player["2"].x;					player["5"].y = player["4"].y + player["4"].height + 10;					break;				case '5-2' :					player["1"].x = (sw / 2) - ((player["1"].width) / 2);					player["1"].y = 5;					player["3"].x = player["1"].x + (player["1"].width / 2) - 5 - player["3"].width;					player["3"].y = player["1"].y + player["1"].height + 5;					player["2"].x = player["3"].x - player["2"].width - 10;					player["2"].y = player["3"].y;					player["4"].x = player["3"].x + player["3"].width + 10;					player["4"].y = player["3"].y;					player["5"].x = player["4"].x + player["4"].width + 10;					player["5"].y = player["3"].y;					break;			}						} catch (e:Error) {							}			stage.scaleMode = flash.display.StageScaleMode.SHOW_ALL;			stage.align = '';						if(this.width < stage.stageWidth) {				this.x = (stage.stageWidth - this.width) / 2;							} 			if(this.height < stage.stageHeight) {				this.y = (stage.stageHeight - this.height) / 2;			}						try {				this.setChildIndex(player["1"], this.numChildren-1);				this.setChildIndex(player["2"], this.numChildren-1);				this.setChildIndex(player["3"], this.numChildren-1);				this.setChildIndex(player["4"], this.numChildren-1);				this.setChildIndex(player["5"], this.numChildren-1);				bringToFront(ctrl);			} catch(e:Error) {							}					}		function updateStream(strPlayerNum:*, strStreamId:String)		{			var strPlayer:String;			var objStream:Object = objStreams[strStreamId];						if(strPlayerNum == 'q') {				removeStream(String(objStream.player_num), true);				return;			}									// Check if this player is already on stage			if(objStream.position != 'q') {				 // on stage, just swap				 MonsterDebugger.trace('swap streams player_num: ' + objStream.player_num + ' - strPlayerNum: ' + strPlayerNum, null);				 swapPlayers(objStream.player_num, Number(strPlayerNum));				 return;			}						strPlayer = playerLoaders[strPlayerNum];						var player:*;			var blnLoad:Boolean = true;			var curPlayer:* = this.getChildByName(strPlayer);															if(blnLoad == true) {				// add loader					//MonsterDebugger.trace('updateStream() objStreams updated', objStream);								removeStream(strPlayer);				//MonsterDebugger.trace('updateStream() removeStream() success', null);				player = addPlayer(objStream, strPlayerNum, strPlayer);					if(Number(strPlayerNum) > numPlayers) {					currentLayout = strPlayerNum + '-1';					numPlayers = Number(strPlayerNum);									updateStats();				}				updateLayout();								player.visible = true;				//MonsterDebugger.trace('updateStream() player', player);				var loader:SWFLoader = player.addLoader(objStream, true);				//MonsterDebugger.trace('updateStream() loader added', null);				queue.append(loader);				try {					//ExternalInterface.call("updateChat", objStream);				} catch (e:Error) {									}							} else {				// swap players				swapPlayers(objStream.player_num, strPlayerNum);			}			objStreams[strStreamId].player_num = strPlayerNum;					}				function updateStreamProgress(event:LoaderEvent):void		{			var strLoader:String = event.target.name;			var player = this.getChildByName(strLoader) as MovieClip;			player.loaderProgress(event.target.progress);			trace("STREAMRIOT: updateStreamProgress progress: " + event.target.name);		}				private function bringToFront(mcl:MovieClip) {			mcl.parent.setChildIndex(mcl,mcl.parent.numChildren - 1);		}				function onStreamPlay(e:Event):void		{			var player = this.getChildByName(playerLoaders[1]) as MovieClip;			player.playStream();		}				function onStreamPause(e:Event):void		{			var player = this.getChildByName(playerLoaders[1]) as MovieClip;			player.pauseStream();		}				function onRefreshStream(e:Event):void		{			queue.load(true);			//var strPlayer:String = playerLoaders[1];			//var player = this.getChildByName('player1') as MovieClip;			//player.refreshStream();		}		function onQualityChange(e:Event):void		{			var strQuality:String = e.target.getQuality();			var strPlayer:String = playerLoaders[1];			var player = this.getChildByName(strPlayer) as MovieClip;			player.currentQuality = strQuality;			player.changeQuality(strQuality);		}				function onChangeVolume(e:Event):void		{			var pct:Number;			//var strPlayer:String = playerLoaders[1];			//var player = this.getChildByName(strPlayer) as MovieClip;			pct = e.target.getVolume();			soundTrans.volume = pct;			SoundMixer.soundTransform = soundTrans;			//player.setVolume(pct);			//trace('SR: on change volume ' + player.playerNum);			e.stopPropagation();		}			}}