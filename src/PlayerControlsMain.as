package {	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.display.StageDisplayState;	import flash.geom.ColorTransform;	import fl.controls.Button;	public class PlayerControlsMain extends MovieClip	{		var blnMute:Boolean = false;		var nVol:Number;		var currentQuality:String;		var isFullscreen:Boolean = false;		var isNowPlaying:Boolean = true;				public function PlayerControlsMain()		{			this.gotoAndStop(0);						currentQuality = "low";						initControls();			playPause.buttonMode = true;			volumeIcon.buttonMode = true;			fullScreen.buttonMode = true;			toggleHD.buttonMode = true;			refreshIcon.buttonMode = true;			layout.buttonMode = true;						playPause.addEventListener(MouseEvent.CLICK, togglePlay);			fullScreen.addEventListener(MouseEvent.CLICK, onFullscreen);			toggleHD.addEventListener(MouseEvent.CLICK, toggleQuality);			volumeIcon.addEventListener(MouseEvent.CLICK, muteHandler);			layout.addEventListener(MouseEvent.CLICK, layoutHandler);			refreshIcon.addEventListener(MouseEvent.CLICK, refreshStreamClickHandler);						volumeIcon.addEventListener(MouseEvent.MOUSE_OVER, hoverIn);			volumeIcon.addEventListener(MouseEvent.MOUSE_OUT, hoverOut);			playPause.addEventListener(MouseEvent.MOUSE_OVER, hoverIn);			playPause.addEventListener(MouseEvent.MOUSE_OUT, hoverOut);			fullScreen.addEventListener(MouseEvent.MOUSE_OVER, hoverIn);			fullScreen.addEventListener(MouseEvent.MOUSE_OUT, hoverOut);						//toggleHD.addEventListener(MouseEvent.MOUSE_OVER, hoverIn);			//toggleHD.addEventListener(MouseEvent.MOUSE_OUT, hoverOut);					refreshIcon.addEventListener(MouseEvent.MOUSE_OVER, hoverIn);			refreshIcon.addEventListener(MouseEvent.MOUSE_OUT, hoverOut);			layout.addEventListener(MouseEvent.MOUSE_OVER, hoverIn);			layout.addEventListener(MouseEvent.MOUSE_OUT, hoverOut);						this.addEventListener("changeVolume", onChangeVolume);			this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);					}				function refreshStreamClickHandler(e:MouseEvent):void		{			trace('STREAMRIOT: calling refreshStream');			dispatchEvent(new Event("refreshStream", true, true));		}				function hoverIn(e:Event):void {			e.target.transform.colorTransform=new ColorTransform(0,0,0,1,255,255,255,0);		}		function hoverOut(e:Event):void {			e.target.transform.colorTransform=new ColorTransform();		}						function onAddedToStage(e:Event):void {			stage.addEventListener(Event.FULLSCREEN, onFullscreenHandler);		}				function initControls() {			if(currentQuality == "low") {				toggleHD.transform.colorTransform=new ColorTransform();							} else {				toggleHD.transform.colorTransform=new ColorTransform(0,0,0,1,255,255,255,0);			}						layoutOps.visible = false;			playPause.gotoAndStop(1);			fullScreen.gotoAndStop(1);			volumeIcon.gotoAndStop(1);			volumeSlider.setVolume(.75, true);		}				function setVolume(pct:Number):void {			if(pct != 0) {				blnMute = false;			}						if (pct >= 0 && pct <= .1)			{				volumeIcon.gotoAndStop(2);			}			else if (pct >= .1 && pct < .5)			{				volumeIcon.gotoAndStop(1);			}			else if (pct >= .5 && pct < .75)			{				volumeIcon.gotoAndStop(1);			}			else if (pct >= .75 && pct <= 1)			{				volumeIcon.gotoAndStop(1);			}			else			{				volumeIcon.gotoAndStop(2);			}					}				function onChangeVolume(e:Event):void {			var pct:Number = e.target.currentVolume;						setVolume(pct);								}				function togglePlay(event:MouseEvent):void		{			if (isNowPlaying == true)			{				dispatchEvent(new Event("streamPaused", true, true));				playPause.gotoAndStop(2);				isNowPlaying = false;			}			else			{				dispatchEvent(new Event("streamPlayed", true, true));				playPause.gotoAndStop(1);				isNowPlaying = true;			}		}				function onFullscreen(e:MouseEvent):void {			toggleFullscreen();		}				function onFullscreenHandler(e:Event):void {			toggleFullscreen();		}				function layoutHandler(e:Event):void {			if(layoutOps.visible == true) {				layoutOps.visible = false;				return;			}						layoutOps.visible = true;		}						function toggleFullscreen():void		{			if (isFullscreen == true)			{				//stage.align = flash.display.StageAlign.TOP_LEFT;				stage.displayState = StageDisplayState.NORMAL;				fullScreen.gotoAndStop(0);				isFullscreen = false;			}			else			{				stage.displayState = StageDisplayState.FULL_SCREEN;				stage.align = "";				fullScreen.gotoAndStop(0);				isFullscreen = true;			}			stage.align = "";		}		function toggleQuality(e:MouseEvent):void		{			if (currentQuality == 'high')			{				//toggleHD.gotoAndStop(1);				setQuality("low");				toggleHD.transform.colorTransform=new ColorTransform();			}			else			{				toggleHD.transform.colorTransform=new ColorTransform(0,0,0,1,255,255,255,0);				//toggleHD.gotoAndStop(2);				setQuality("high");			}		}				function getQuality():String {			return currentQuality;		}				function setQuality(strQuality:String):void		{			currentQuality = strQuality;			dispatchEvent(new Event("qualityChanged", true, true));		}		function muteHandler(e:MouseEvent):void		{			if (blnMute == true)			{				//unmute				volumeSlider.setVolume(nVol);				blnMute = false;			}			else			{				//mute				blnMute = true;				nVol = volumeSlider.getVolume();				volumeSlider.setVolume(0);			}		}	}}